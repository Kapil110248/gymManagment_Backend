// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/**
 * =========================================
 * üîê AUTH & RBAC
 * =========================================
 */
model Role {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  status      RoleStatus @default(ACTIVE)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // relations
  staff       Staff[]
  permissions RolePermission[]
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  roles       RolePermission[]
}

model RolePermission {
  roleId       Int
  permissionId Int

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
  @@index([permissionId])
}

/**
 * =========================================
 * üè¢ BRANCH
 * =========================================
 */
model Branch {
  id        Int          @id @default(autoincrement())
  name      String
  code      String       @unique
  address   String
  manager   String
  phone     String?
  email     String?
  username  String       @unique
  password  String
  imageUrl  String?
  status    BranchStatus @default(INACTIVE)
  hours     Json
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // back-relations
  staff    Staff[]
  members  Member[]
  invoices Invoice[]
  classes  GymClass[]
}

/**
 * =========================================
 * üë• STAFF & MEMBERS
 * =========================================
 */
model Staff {
  id             Int             @id @default(autoincrement())
  staffCode      String          @unique
  firstName      String          @default("TempFirst")
  lastName       String          @default("TempLast")
  gender         StaffGender     @default(MALE)
  dob            DateTime
  email          String          @unique
  phone          String          @unique
  profilePhoto   String?
  roleId         Int?
  status         StaffStatus     @default(ACTIVE)
  joinDate       DateTime        @default(now())
  exitDate       DateTime?
  salaryType     StaffSalaryType @default(FIXED)
  fixedSalary    Decimal?        @db.Decimal(10, 2)
  hourlyRate     Decimal?        @db.Decimal(10, 2)
  commissionRate Decimal?        @db.Decimal(5, 2)
  loginAccess    Boolean         @default(false)
  username       String?         @unique
  password       String?
  branchId       Int?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  // relations
  role   Role?   @relation(fields: [roleId], references: [id])
  branch Branch? @relation(fields: [branchId], references: [id])

  notifications    Notification[]
  salaryRecords    SalaryRecord[]
  shiftAllocations ShiftAllocation[]
  attendance       StaffAttendance[]
  tasks            Task[]
  sessions         Session[]         @relation("SessionTrainer")
}

model Member {
  id               Int                    @id @default(autoincrement())
  memberCode       String                 @unique
  firstName        String
  middleName       String?
  lastName         String
  gender           MemberGender
  dob              DateTime?
  email            String?                @unique
  phone            String
  address          String?
  city             String?
  state            String?
  status           MemberStatus           @default(ACTIVE)
  membershipStatus MemberMembershipStatus @default(ACTIVATED)
  weight           Decimal?               @db.Decimal(5, 2)
  height           Decimal?               @db.Decimal(5, 2)
  chest            Decimal?               @db.Decimal(5, 2)
  waist            Decimal?               @db.Decimal(5, 2)
  arms             Decimal?               @db.Decimal(5, 2)
  thigh            Decimal?               @db.Decimal(5, 2)
  fatPercent       Decimal?               @db.Decimal(5, 2)
  username         String?                @unique
  password         String?
  memberImage      String?
  branchId         Int?
  groupId          Int?
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt

  // relations
  branch           Branch?            @relation(fields: [branchId], references: [id])
        
  memberAttendance MemberAttendance[]
  invoices         Invoice[]
  payments         Payment[]
  memberships      Membership[]
  bookings         Booking[]
}

/**
 * =========================================
 * üïí ATTENDANCE
 * =========================================
 */
model MemberAttendance {
  id           Int       @id @default(autoincrement())
  memberId     Int
  checkInTime  DateTime  @default(now())
  checkOutTime DateTime?

  member Member @relation(fields: [memberId], references: [id])

  @@index([memberId])
}

model StaffAttendance {
  id       Int                   @id @default(autoincrement())
  staffId  Int
  checkIn  DateTime?
  checkOut DateTime?
  date     DateTime
  mode     StaffAttendanceMode   @default(QR)
  notes    String?
  shift    StaffAttendanceShift  @default(NOSHIFT)
  status   StaffAttendanceStatus @default(PRESENT)

  staff Staff @relation(fields: [staffId], references: [id])

  @@index([staffId])
}

/**
 * =========================================
 * üí≥ PLANS, MEMBERSHIPS & BOOKINGS
 * =========================================
 */
model MembershipPlan {
  id           Int                  @id @default(autoincrement())
  name         String
  description  String?
  durationDays Int
  price        Decimal              @db.Decimal(10, 2)
  status       MembershipPlanStatus @default(ACTIVE)
  features     Json?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  memberships        Membership[]
  bookings           Booking[]
  WalkInRegistration WalkInRegistration[]
}

enum PlanType {
  GROUP
  PERSONAL
}

model Plan {
  id        Int      @id @default(autoincrement())
  name      String
  sessions  Int      @default(0)
  validity  Int      @default(0)
  price     Decimal  @db.Decimal(10, 2)
  type      PlanType
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookings Booking[]
}

model Membership {
  id        Int              @id @default(autoincrement())
  memberId  Int
  planId    Int
  startDate DateTime
  endDate   DateTime
  status    MembershipStatus @default(ACTIVE)

  member Member         @relation(fields: [memberId], references: [id])
  plan   MembershipPlan @relation(fields: [planId], references: [id])

  @@index([memberId])
  @@index([planId])
}

model Booking {
  id          Int      @id @default(autoincrement())
  memberId    Int
  planId      Int // points to Plan (or MembershipPlan if you prefer ‚Äì keep one)
  status      String   @default("pending") // pending | approved | rejected
  requestedAt DateTime @default(now())

  member           Member          @relation(fields: [memberId], references: [id])
  plan             Plan            @relation(fields: [planId], references: [id])
  MembershipPlan   MembershipPlan? @relation(fields: [membershipPlanId], references: [id])
  membershipPlanId Int?

  @@index([memberId])
  @@index([planId])
}

/**
 * =========================================
 * üóì CLASSES & SESSIONS (avoid reserved 'class')
 * =========================================
 */
model GymClass {
  id           Int         @id @default(autoincrement())
  name         String
  branchId     Int?
  status       ClassStatus @default(ACTIVE)
  scheduleDays Json // e.g. ["Mon","Wed","Fri"] or richer object
  date         DateTime
  time         DateTime
  totalSeats   Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  branch   Branch?   @relation(fields: [branchId], references: [id])
  sessions Session[]

  @@index([branchId])
  @@map("class") // if your DB already has `class` table
}

model Session {
  id         Int           @id @default(autoincrement())
  gymClassId Int
  trainerId  Int
  date       DateTime
  time       DateTime
  duration   Int
  location   String?
  notes      String?
  status     SessionStatus @default(SCHEDULED)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  gymClass GymClass @relation(fields: [gymClassId], references: [id])
  trainer  Staff    @relation("SessionTrainer", fields: [trainerId], references: [id])

  @@index([gymClassId])
  @@index([trainerId])
}

/**
 * =========================================
 * üí∞ INVOICE & PAYMENTS
 * =========================================
 */
model Invoice {
  id            Int           @id @default(autoincrement())
  invoiceNumber String        @unique
  status        InvoiceStatus @default(UNPAID)
  email         String
  customerName  String
  phone         String
  invoiceDate   DateTime
  dueDate       DateTime?
  subtotal      Decimal       @db.Decimal(12, 2)
  taxAmount     Decimal       @db.Decimal(12, 2)
  totalAmount   Decimal       @db.Decimal(12, 2)
  discount      Int?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  branchId      Int
  memberId      Int

  branch Branch        @relation(fields: [branchId], references: [id])
  member Member        @relation(fields: [memberId], references: [id])
  items  InvoiceItem[]
  

  @@index([branchId])
  @@index([memberId])
}

model InvoiceItem {
  id          Int     @id @default(autoincrement())
  invoiceId   Int
  description String
  quantity    Int
  price       Decimal @db.Decimal(10, 2)
  taxPercent  Decimal @db.Decimal(5, 2)
  lineTotal   Decimal @db.Decimal(10, 2)

  invoice Invoice @relation(fields: [invoiceId], references: [id])

  @@index([invoiceId])
}

model Payment {
  id                 Int           @id @default(autoincrement())
  amount             Decimal       @db.Decimal(10, 2)
  method             PaymentMethod
  status             PaymentStatus @default(PENDING)
  memberId           Int
  invoiceNo          String?
  receiptUrl         String?
  paymentDescription String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  member Member @relation(fields: [memberId], references: [id])

  @@index([memberId])
}

/**
 * =========================================
 * üßæ SALARY, SHIFTS, TASKS, NOTIFICATIONS
 * =========================================
 */
model SalaryRecord {
  id              Int                @id @default(autoincrement())
  staffId         Int
  status          SalaryRecordStatus @default(GENERATED)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  commissionTotal Decimal?           @db.Decimal(10, 2)
  fixedSalary     Decimal?           @db.Decimal(10, 2)
  hourlyRate      Decimal?           @db.Decimal(10, 2)
  hoursWorked     Decimal?           @db.Decimal(7, 2)
  netPay          Decimal?           @db.Decimal(10, 2)
  bonusLabel      String?
  bonusAmount     Int?
  deductionLabel  String?
  deductionAmount Int?
  periodStart     DateTime
  periodEnd       DateTime

  staff Staff @relation(fields: [staffId], references: [id])

  @@index([staffId])
}

model ShiftAllocation {
  id         Int       @id @default(autoincrement())
  staffId    Int
  shiftType  ShiftType
  date       DateTime
  startTime  DateTime
  endTime    DateTime
  breakStart DateTime?
  breakEnd   DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  staff Staff @relation(fields: [staffId], references: [id])

  @@index([staffId])
}

model Task {
  id          Int        @id @default(autoincrement())
  staffId     Int
  taskDate    DateTime
  category    String
  taskTitle   String
  description String
  status      TaskStatus @default(PENDING)
  completedAt DateTime?

  staff Staff @relation(fields: [staffId], references: [id])

  @@index([staffId])
}

model Notification {
  id        Int                @id @default(autoincrement())
  staffId   Int
  title     String
  status    NotificationStatus @default(NEW)
  createdAt DateTime           @default(now())

  staff Staff @relation(fields: [staffId], references: [id])

  @@index([staffId])
}

/**
 * =========================================
 * üìù CAMPAIGNS
 * =========================================
 */
model Campaign {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  type      String // 'email' | 'sms'
  target    String? // 'all' | 'members' | 'staff'
  status    String   @default("scheduled")
  createdAt DateTime @default(now())
}

/**
 * =========================================
 * üßæ WALK-IN REGISTRATION
 * =========================================
 */
model WalkInRegistration {
  id               Int      @id @default(autoincrement())
  fullName         String
  phoneNumber      String
  email            String?
  interested       String
  time             DateTime
  notes            String?
  membershipPlanId Int?

  membershipPlan MembershipPlan? @relation(fields: [membershipPlanId], references: [id])
}

/**
 * =========================================
 * üîß MAINTENANCE (OPTIONAL UTILITIES)
 * =========================================
 */
model Maintenance {
  id         Int                 @id @default(autoincrement())
  issueTitle String
  reportedOn DateTime
  status     MaintenanceStatus   @default(PENDING)
  priority   MaintenancePriority @default(MEDIUM)
  assignedTo Int?
}

/**
 * =========================================
 * üßë‚Äçü§ù‚Äçüßë GROUPS (table name "groups")
 * =========================================
 */
model Group {
  id           Int      @id @default(autoincrement())
  name         String
  photo        String?
  totalMembers Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("groups")
}

/**
 * =========================================
 * ENUMS (multi-line; one value per line)
 * =========================================
 */
enum InvoiceStatus {
  DRAFT
  UNPAID
  PAID
  PARTIALLY_PAID
  VOID
}

enum ClassStatus {
  ACTIVE
  INACTIVE
  CANCELLED
}

enum PaymentMethod {
  CASH
  CARD
  UPI
  NETBANKING
  RAZORPAY
  OTHER
}

enum SalaryRecordStatus {
  GENERATED
  PAID
  PENDING
}

enum ShiftType {
  STRAIGHT
  BREAK
}

enum MaintenanceStatus {
  PENDING
  INPROGRESS
  RESOLVED
}

enum MembershipStatus {
  ACTIVE
  EXPIRED
  SUSPENDED
  CANCELLED
}

enum NotificationStatus {
  NEW
  READ
}

enum PaymentStatus {
  PENDING
  COMPLETED
  PARTIAL
  FAILED
}

enum BranchStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
}

enum RoleStatus {
  ACTIVE
  INACTIVE
}

enum StaffGender {
  MALE
  FEMALE
  OTHER
}

enum TaskStatus {
  PENDING
  INPROGRESS
  COMPLETED
}

enum MemberGender {
  MALE
  FEMALE
  OTHER
}

enum StaffAttendanceMode {
  QR
  MANUAL
  SYSTEM
}

enum MembershipPlanStatus {
  ACTIVE
  INACTIVE
}

enum SessionStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum StaffAttendanceShift {
  MORNING
  EVENING
  NIGHT
  NOSHIFT
}

enum StaffAttendanceStatus {
  PRESENT
  ABSENT
  LATE
  ONLEAVE
}

enum StaffStatus {
  ACTIVE
  INACTIVE
  RESIGNED
  TERMINATED
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  SUSPENDED
  CONTINUE
}

enum MemberMembershipStatus {
  ACTIVATED
  DEACTIVATED
  PENDING
}

enum StaffSalaryType {
  FIXED
  HOURLY
  COMMISSION
}
